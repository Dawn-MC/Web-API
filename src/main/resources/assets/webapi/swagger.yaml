swagger: '2.0'

info:
  title: WebAPI
  description: |
    Access Sponge powered Minecraft servers through a WebAPI

    # Introduction
    This is the documentation of the various API routes offered by the WebAPI plugin.

    This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods,
    request `HEADERS` and `RESPONSE CODES` and `JSON` data.

    By default this documentation can be found at http://localhost:8080 (while your minecraft server is running) and the various routes start with http://localhost:8080/api/...

    As a quick test try reaching the route http://localhost:8080/api/info (remember that you can only access "localhost" routes on the server on which you are running minecraft).
    This route should show you basic information about your server, like the motd and player count.

    # Additional data
    Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete
    object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.

    You can also find more information in the github docs (https://github.com/Valandur/Web-API/tree/master/docs/DATA.md)
  version: "<version>"

host: "<host>"

schemes:
  - http
basePath: /api

consumes:
  - application/json

produces:
  - application/json

tags:
  - name: Block
    description: Get information about blocks and manipulate them.
  - name: Class
    description: Provides information about the classes loaded on the server.
  - name: Command
    description: List all commands on the server and execute them.
  - name: Entity
    description: List all entities and get detailed information about them.
  - name: History
    description: Provides access to the command and chat history.
  - name: Info
    description: Get misc information about the minecraft server
  - name: Player
    description: List all players and get detailed information about them.
  - name: Plugin
    description: List all plugins and get detailed information about them.
  - name: Tile Entity
    description: List all tile entities and get detailed information about them.
  - name: World
    description: List all worlds and get detailed information about them.

#parameters:

securityDefinitions:
  headerKey:
    type: apiKey
    name: x-webapi-key
    in: header
  queryKey:
    type: apiKey
    name: key
    in: query

security:
  - headerKey: []
  - queryKey: []

responses:
  400:
    description: Invalid parameter
    schema:
      type: object
      properties:
        error:
          type: string
          description: A description of the type of error that occured.
  403:
    description: Access denied
    schema:
      type: object
      properties:
        error:
          type: string
          description: A description of the type of error that occured.
  404:
    description: Not found
    schema:
      type: object
      properties:
        error:
          type: string
          description: A description of the type of error that occured.

paths:
  /block:
    get:
      summary: List block updates
      description: |
        List all currently running/paused block update operations.
      tags:
        - Block
      responses:
        403:
          $ref: '#/responses/403'
        200:
          description: Block updates
          schema:
            type: array
            items:
              type: object
              properties:
                uuid:
                  type: string
                  description: The UUID of the block update operation.
                status:
                  type: string
                  description: |
                    The current status of the operation, one of: INIT, RUNNING, PAUSED, DONE, ERRORED.
                progress:
                  type: number
                  format: float
                  description: The update progress of this operation, from 0 (nothing done) to 1 (completely done).
                blocksSet:
                  type: number
                  format: integer
                  description: The amount of blocks changed (blocks that are already set to the correct type do not count).
    post:
      summary: Modify blocks
      description: |
        Start a request to change blocks on the server.
      parameters:
        - name: Request
          in: body
          description: The requested changes to blocks
          required: true
          schema:
            $ref: '#/definitions/BlockChangeList'
      tags:
        - Block
      responses:
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        406:
          description: Too many blocks
          schema:
            type: object
            properties:
              error:
                type: string
                description: A description of the type of error that occured.
        200:
          description: Block update uuid
          schema:
            type: object
            properties:
              uuid:
                type: string
                description: The uuid of the block change operation
  /block/{uuid}:
    put:
      summary: Modify block update
      parameters:
        - name: uuid
          in: path
          type: string
          description: The uuid of the block update.
          required: true
        - name: data
          in: body
          required: true
          description: The new data applied to the block update.
          schema:
            type: object
            properties:
              pause:
                type: boolean
                description: True if the block operation should be paused, false otherwise.
      tags:
        - Block
      responses:
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        200:
          description: Status change successful
    delete:
      summary: Cancel block update
      parameters:
        - name: uuid
          in: path
          type: string
          description: The uuid of the block update.
          required: true
      tags:
        - Block
      responses:
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        200:
          description: Cancel successful
  /block/{world}/{x}/{y}/{z}:
    get:
      summary: Get one block
      description: |
        Gets information about one block in the world.

        > Required permission: block.get
      parameters:
        - name: world
          in: path
          type: string
          description: The uuid of the world the block is in.
          required: true
        - name: x
          in: path
          type: integer
          description: The x-coordinate of the block.
          required: true
        - name: y
          in: path
          type: integer
          description: The y-coordinate of the block.
          required: true
        - name: z
          in: path
          type: integer
          description: The z-coordinate of the block.
          required: true
      tags:
        - Block
      responses:
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        200:
          description: Single block
          schema:
            $ref: '#/definitions/BlockFull'
  /block/{world}/{minX}/{minY}/{minZ}/{maxX}/{maxY}/{maxZ}:
    get:
      summary: Get block volume
      description: |
        Gets information about a block volume (multiple blocks) in the world.

        The blocks in the returned block volume can be accessed by using `responseData.blocks[x][y][z]` where x, y, and z are the coordinates of the block.

        > Required permission: block.get
      parameters:
        - name: world
          in: path
          type: string
          description: The uuid of the world the block is in.
          required: true
        - name: minX
          in: path
          type: integer
          description: The minimum x-coordinate of the volume.
          required: true
        - name: minY
          in: path
          type: integer
          description: The minimum y-coordinate of the volume.
          required: true
        - name: minZ
          in: path
          type: integer
          description: The minimum z-coordinate of the volume.
          required: true
        - name: maxX
          in: path
          type: integer
          description: The maximum x-coordinate of the volume.
          required: true
        - name: maxY
          in: path
          type: integer
          description: The maximum y-coordinate of the volume.
          required: true
        - name: maxZ
          in: path
          type: integer
          description: The maximum z-coordinate of the volume.
          required: true
      tags:
        - Block
      responses:
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        200:
          description: Block volume
          schema:
            $ref: '#/definitions/BlockVolume'

  /class:
    get:
      summary: Cached classes
      description: |
        Get a list of all the classes available on the server.

        > Required permission: class.get
      tags:
        - Class
      responses:
        403:
          $ref: '#/responses/403'
        200:
          description: List of cached classes
          schema:
            type: array
            items:
              type: string
              description: The name of the class
  /class/{classname}:
    get:
      summary: Class details
      description: |
        Get the fields and methods of a specific class loaded on the server.
        Use the fully quilified classname (e.g. "net.minecraft.tileentity.TileEntityChest").

        > Required permission: class.get
      parameters:
        - name: classname
          in: path
          type: string
          description: The classname of the class to show.
          required: true
      tags:
        - Class
      responses:
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        200:
          description: Class details
          schema:
            type: object
            properties:
              class:
                $ref: '#/definitions/Class'
  /class/{classname}/subclasses:
    get:
      summary: Subclasses
      description: |
        Gets all the subclasses of a specific class.

        > Required permission: class.get
      parameters:
        - name: classname
          in: path
          type: string
          description: The classname of the class to show.
          required: true
      tags:
        - Class
      responses:
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        200:
          description: List of subclasses
          schema:
            type: object
            properties:
              base:
                type: string
                description: The base class.
              classes:
                type: array
                description: An array of all the subclasses of the base class.
                items:
                  type: string
            example:
              base: org.spongepowered.api.event.Event
              classes:
              - org.spongepowered.api.event.SaveWorldEvent$Post$Impl
              - org.spongepowered.api.event.FishingEvent$HookEntity$Impl
              - org.spongepowered.api.event.item.inventory.ChangeInventoryEvent$Transfer
              - org.spongepowered.api.event.TameEntityEvent$Impl
              - org.spongepowered.api.event.CollideEntityEvent$Impl
              - org.spongepowered.api.event.game.state.GameStartedServerEvent
              - org.spongepowered.api.event.ClientConnectionEvent$Auth$Impl
              - org.spongepowered.api.event.block.tileentity.ChangeSignEvent
              - org.spongepowered.api.event.world.SaveWorldEvent
              - org.spongepowered.api.event.item.inventory.DropItemEvent$Dispense
              - org.spongepowered.api.event.ChangeInventoryEvent$Pickup$Impl
              - org.spongepowered.api.event.ChangeGameModeEvent$Impl
              - me.ryanhamshire.griefprevention.api.event.ResizeClaimEvent
              - nl.riebie.mcclans.api.events.ClanSetHomeEvent
              - org.spongepowered.api.event.BreedEntityEvent$FindMate$Impl
              - org.spongepowered.api.event.action.SleepingEvent$Tick
              - org.spongepowered.api.event.game.state.GameStateEvent
              - org.spongepowered.api.event.TargetAgentEvent$Impl
              - org.spongepowered.api.event.item.inventory.ClickInventoryEvent$Shift$Primary
              - org.spongepowered.api.event.ChangeInventoryEvent$Transfer$Impl
              - org.spongepowered.api.event.BrewingEvent$Tick$Impl
              - org.spongepowered.api.event.block.TickBlockEvent$Random
              - org.spongepowered.api.event.TabCompleteEvent$Command$Impl

  /cmd:
    get:
      summary: Command list
      description: |
        Gets a list of all the commands available on the server.

        > Required permission: cmd.get
      tags:
        - Command
      responses:
        403:
          $ref: '#/responses/403'
        200:
          description: List of commands
          schema:
            $ref: '#/definitions/CommandList'
    post:
      summary: Execute command
      description: |
        Execute a command on the server. (Almost the same as running it from the console).
        Pass a list of commands to execute them in succession, if only passing one command the
        array is not required.

        > Required permission: cmd.post
        > Required permission: cmd.post.[command]
      parameters:
        - name: Request
          in: body
          description: The command and arguments sent to the server
          required: true
          schema:
            $ref: '#/definitions/CommandRequestList'
      tags:
        - Command
      responses:
        403:
          $ref: '#/responses/403'
        200:
          description: The command responses
          schema:
            $ref: '#/definitions/CommandResponse'
  /cmd/{name}:
    get:
      summary: Detailed command info
      description: |
        Get detailed information about a command.

        > Required permission: cmd.get
      parameters:
        - name: name
          in: path
          description: The name (main alias) of the command
          type: string
          required: true
      tags:
        - Command
      responses:
        403:
          $ref: '#/responses/403'
        200:
          description: Detailed info about the command
          schema:
            $ref: '#/definitions/CommandFull'

  /entity:
    get:
      summary: Entities list
      description: |
        Get a list of all entities on the server (in all worlds).

        > Required permission: entity.get
      tags:
        - Entity
      responses:
        403:
          $ref: '#/responses/403'
        200:
          description: List of entities
          schema:
            $ref: '#/definitions/EntityList'
  /entity/{uuid}:
    get:
      summary: Detailed entity info
      description: |
        Get detailed information about an entity.

        > Required permission: entity.get
      parameters:
        - name: uuid
          in: path
          type: string
          description: The uuid of the entity to get detailed information about.
          required: true
        - name: fields
          in: query
          type: string
          description: An optional list of additional fields to get.
        - name: methods
          in: query
          type: string
          description: An optional list of additional methods to get.
      tags:
        - Entity
      responses:
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        200:
          description: Detailed entity info
          schema:
            $ref: '#/definitions/EntityFull'
    post:
      summary: Execute entity method
      description: |
        Provides direct access to the underlaying entity object and can execute any method on it.

        > Required permission: entity.post
      parameters:
        - name: uuid
          in: path
          type: string
          description: The uuid of the entity.
          required: true
        - name: Request
          in: body
          description: Information about which method to execute.
          required: true
          schema:
            $ref: '#/definitions/RawRequest'
      tags:
        - Entity
      responses:
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        200:
          description: Method return value
          schema:
            $ref: '#/definitions/RawResponse'

  /history/chat:
    get:
      summary: Chat History
      description: |
        View a history of the server chat.

        > Required permission: history.get
      tags:
        - History
      responses:
        403:
          $ref: '#/responses/403'
        200:
          description: Chat history
          schema:
            $ref: '#/definitions/ChatHistory'
  /history/cmd:
    get:
      summary: Command History
      description: |
        View a history of the server commands.

        > Required permission: history.get
      tags:
        - History
      responses:
        403:
          $ref: '#/responses/403'
        200:
          description: Command history
          schema:
            $ref: '#/definitions/CommandHistory'

  /info:
    get:
      summary: Server info
      description: |
        Get general information about the minecraft server.

        > Required permission: info.get
      tags:
        - Info
      responses:
        403:
          $ref: '#/responses/403'
        200:
          description: General info
          schema:
            $ref: '#/definitions/ServerInfo'

  /message:
    post:
      summary: Send an interactive message
      description: |
        Send an interactive message to a player. Make sure to have an event hook for "custom_message" to receive
        the response.

        > Required permission: message.post
      parameters:
        - name: Request
          in: body
          description: Details of the message sent to the player
          required: true
          schema:
            $ref: '#/definitions/MessageRequest'
      tags:
        - Message
      responses:
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        200:
          description: Message sent
          schema:
            ok:
              type: boolean
              description: True if the message was sent successfully, false otherwise.

  /player:
    get:
      summary: Player list
      description: |
        Get a list of all the players on the server.

        > Required permission: player.get
      tags:
        - Player
      responses:
        403:
          $ref: '#/responses/403'
        200:
          description: List of players
          schema:
            $ref: '#/definitions/PlayerList'
  /player/{uuid}:
    get:
      summary: Detailed player info
      description: |
        Get detailed information about a player.

        > Required permission: player.get
      parameters:
        - name: uuid
          in: path
          type: string
          description: The uuid of the player to get detailed information about.
          required: true
        - name: fields
          in: query
          type: string
          description: An optional list of additional fields to get.
        - name: methods
          in: query
          type: string
          description: An optional list of additional methods to get.
      tags:
        - Player
      responses:
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        200:
          description: Detailed player info
          schema:
            $ref: '#/definitions/PlayerFull'
    post:
      summary: Execute player method
      description: |
        Provides direct access to the underlaying player object and can execute any method on it.

        > Required permission: player.post
      parameters:
        - name: uuid
          in: path
          type: string
          description: The uuid of the player.
          required: true
        - name: Request
          in: body
          description: Information about which method to execute.
          required: true
          schema:
            $ref: '#/definitions/RawRequest'
      tags:
        - Player
      responses:
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        200:
          description: Method return value
          schema:
            $ref: '#/definitions/RawResponse'

  /plugin:
    get:
      summary: Plugin list
      description: |
        Get a list of all the plugins running on the server.

        > Required permission: plugin.get
      tags:
        - Plugin
      responses:
        403:
          $ref: '#/responses/403'
        200:
          description: List of plugins
          schema:
            $ref: '#/definitions/PluginList'
  /plugin/{id}:
    get:
      summary: Detailed plugin info
      description: |
        Gets detailed information about a plugin.

        > Required permission: plugin.get
      parameters:
        - name: id
          in: path
          type: string
          description: The id of the plugin to get detailed information about.
          required: true
      tags:
        - Plugin
      responses:
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        200:
          description: Detailed plugin info
          schema:
            $ref: '#/definitions/PluginFull'

  /tile-entity:
    get:
      summary: Tile entities list
      description: |
        Get a list of all tile entities on the server (in all worlds).

        > Required permission: tile-entity.get
      tags:
        - Tile Entity
      responses:
        403:
          $ref: '#/responses/403'
        200:
          description: List of tile entities
          schema:
            $ref: '#/definitions/TileEntityList'
  /tile-entity/{worldUuid}/{x}/{y}/{z}:
    get:
      summary: Detailed tile entity info
      description: |
        Get detailed information about a tile entity.

        > Required permission: tile-entity.get
      parameters:
        - name: worldUuid
          in: path
          type: string
          description: The uuid of the world the tile entity is in.
          required: true
        - name: x
          in: path
          type: integer
          description: The x-coordinate of the tile entity.
          required: true
        - name: y
          in: path
          type: integer
          description: The y-coordinate of the tile entity.
          required: true
        - name: z
          in: path
          type: integer
          description: The z-coordinate of the tile entity.
          required: true
        - name: fields
          in: query
          type: string
          description: An optional list of additional fields to get.
        - name: methods
          in: query
          type: string
          description: An optional list of additional methods to get.
      tags:
        - Tile Entity
      responses:
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        200:
          description: Detailed tile entity info
          schema:
            $ref: '#/definitions/TileEntityFull'
    post:
      summary: Execute tile entity methods
      description: |
        Provides direct access to the underlaying tile entity object and can execute any method on it.

        > Required permission: tile-entity.post
      parameters:
        - name: worldUuid
          in: path
          type: string
          description: The uuid of the world the tile entity is in.
          required: true
        - name: x
          in: path
          type: string
          description: The x-coordinate of the tile entity.
          required: true
        - name: y
          in: path
          type: string
          description: The y-coordinate of the tile entity.
          required: true
        - name: z
          in: path
          type: string
          description: The z-coordinate of the tile entity.
          required: true
        - name: Request
          in: body
          description: Information about which method to execute.
          required: true
          schema:
            $ref: '#/definitions/RawRequest'
      tags:
        - Tile Entity
      responses:
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        200:
          description: Method return value
          schema:
            $ref: '#/definitions/RawResponse'

  /world:
    get:
      summary: World list
      description: |
        Get a list of all the worlds on the server.

        > Required permission: world.get
      tags:
        - World
      responses:
        403:
          $ref: '#/responses/403'
        200:
          description: List of worlds
          schema:
            $ref: '#/definitions/WorldList'
  /world/{uuid}:
    get:
      summary: Detailed world info
      description: |
        Get detailed information about a world.

        > Required permission: world.get
      parameters:
        - name: uuid
          in: path
          type: string
          description: The uuid of the world to get detailed information about.
          required: true
        - name: fields
          in: query
          type: string
          description: An optional list of additional fields to get.
        - name: methods
          in: query
          type: string
          description: An optional list of additional methods to get.
      tags:
        - World
      responses:
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        200:
          description: Detailed world info
          schema:
            $ref: '#/definitions/WorldFull'
    post:
      summary: Execute world methods
      description: |
        Provides direct access to the underlaying world object and can execute any method on it.

        > Required permission: world.post
      parameters:
        - name: uuid
          in: path
          type: string
          description: The uuid of the world.
          required: true
        - name: Request
          in: body
          description: Information about which method to execute.
          required: true
          schema:
            $ref: '#/definitions/RawRequest'
      tags:
        - World
      responses:
        400:
          $ref: '#/responses/400'
        403:
          $ref: '#/responses/403'
        404:
          $ref: '#/responses/404'
        200:
          description: Method return value
          schema:
            $ref: '#/definitions/RawResponse'


definitions:
  Location:
    type: object
    description: Describes a location in a world.
    properties:
      world:
        $ref: '#/definitions/World'
      position:
        $ref: '#/definitions/Vector3'

  Vector3:
    type: object
    description: Describes a location.
    properties:
      x:
        type: number
        format: double
        description: The x-coordinate of the vector.
      y:
        type: number
        format: double
        description: The y-coordinate of the vector.
      z:
        type: number
        format: double
        description: The z-coordinate of the vector.

  Inventory:
    type: object
    description: A collection of item stacks.
    properties:
      name:
        type: string
        description: The name of the inventory.
      stackCount:
        type: integer
        description: The amount of different stacks in the inventory.
      itemCount:
        type: integer
        description: The total amount of items in the inventory.
      items:
        type: array
        description: The item stacks in the inventory
        items:
          $ref: '#/definitions/ItemStack'
  ItemStack:
    type: object
    description: A stack of items.
    properties:
      id:
        type: string
        description: The unique id of the item
      quantity:
        type: string
        description: The amount of items in this stack
      data:
        type: object
        description: Any additional data attached to the items.

  RawRequest:
    type: object
    description: |
      This data defines what method to execute.
    required:
      - method
    properties:
      method:
        type: string
        description: The name of the method to execute.
      params:
        type: array
        description: The parameters passed to the method.
        items:
          $ref: '#/definitions/RawRequestParam'
  RawRequestParam:
    type: object
    description: A parameter that is interpreted by the server and passed to the method.
    properties:
      type:
        type: string
        description: The type of the parameter. This defines how the value is interpreted.
        enum:
          - int
          - integer
          - float
          - double
          - bool
          - boolean
          - byte
          - char
          - long
          - short
          - string
          - enum
          - class
          - vector3d
          - vector3i
          - text
          - world
          - player
          - itemstack
      value:
        type: object
        description: |
          The value of the parameter. Base types (like integer, float, boolean, etc.) are converted
          to the correct type and then passed to the method. Some parameters are handled differently,
          they are listed below along with their usage:

          - class: Interpreted as the fully qualified classname of a class which is loaded and passed |
          - vector3(i/d): Converted to a Vector3(i/d) object. Requires the properties "x", "y" and "z"
          - text: Converted to a sponge text
          - world: Assumed to be the UUID of a world which is fetched and passed
          - player: Assumed to be the UUID of the player which is fetched and passed.
          - itemstack: Converted to a new item stack. Requires the properties "itemType" and "amount"
      optional:
        type: boolean
        description: True if the value should be wrapped into an optional value, false otherwise.
  RawResponse:
    type: object

  Class:
    type: object
    description: A class definition that is loaded on the server.
    properties:
      name:
        type: string
        description: The name of the class
      parent:
        type: string
        description: The name of the superclass
      fields:
        type: array
        items:
          type: object
          description: Represents a field from this class.
          properties:
            type:
              type: string
              description: The type of the field.
            modifiers:
              type: array
              description: The modifiers of the field.
              items:
                type: string
            from:
              type: string
              description: The class where this field is from (if from a superclass)
      methods:
        type: array
        items:
          type: object
          description: Represents a method from this class.
          properties:
            modifiers:
              type: array
              items:
                type: string
            params:
              type: array
              description: The parameters of the method.
              items:
                type: string
                description: The type of the parameter.
            return:
              type: string
              description: The type of the return value.
            from:
              type: string
              description: The class where this field is from (if from a superclass)
    example:
      name: net.minecraft.tileentity.TileEntityChest
      parent: net.minecraft.tileentity.TileEntityLockableLoot
      fields:
        fabric:
          type: org.spongepowered.common.item.inventory.lens.Fabric
          modifiers:
          - private
        slots:
          type: org.spongepowered.common.item.inventory.lens.impl.collections.SlotCollection
          modifiers:
          - protected
          from: net.minecraft.tileentity.TileEntityLockableLoot
        lens:
          type: org.spongepowered.common.item.inventory.lens.Lens
          modifiers:
          - private
        empty:
          type: org.spongepowered.api.item.inventory.EmptyInventory
          modifiers:
          - protected
          from: net.minecraft.tileentity.TileEntityLockableLoot
        parent:
          type: org.spongepowered.api.item.inventory.Inventory
          modifiers:
          - protected
          from: net.minecraft.tileentity.TileEntityLockableLoot
        next:
          type: org.spongepowered.api.item.inventory.Inventory
          modifiers:
          - protected
          from: net.minecraft.tileentity.TileEntityLockableLoot
        children:
          type: java.util.List
          modifiers:
          - protected
          from: net.minecraft.tileentity.TileEntityLockableLoot
        slotIterator:
          type: java.lang.Iterable
          modifiers:
          - protected
          from: net.minecraft.tileentity.TileEntityLockableLoot
        customTileData:
          type: net.minecraft.nbt.NBTTagCompound
          modifiers:
          - private
          from: net.minecraft.tileentity.TileEntity
        manipulators:
          type: java.util.List
          modifiers:
          - private
          from: net.minecraft.tileentity.TileEntity
        tileType:
          type: org.spongepowered.api.block.tileentity.TileEntityType
          modifiers:
          - final
          - private
          from: net.minecraft.tileentity.TileEntity
        isTileVanilla:
          type: boolean
          modifiers:
          - final
          - private
          from: net.minecraft.tileentity.TileEntity
        timing:
          type: co.aikar.timings.Timing
          modifiers:
          - private
          from: net.minecraft.tileentity.TileEntity
        locatableBlock:
          type: org.spongepowered.api.world.LocatableBlock
          modifiers:
          - private
          from: net.minecraft.tileentity.TileEntity
      methods:
        getInventory:
          modifiers:
          - public
          - volatile
          params: []
          return: org.spongepowered.api.item.inventory.type.CarriedInventory
          from: net.minecraft.tileentity.TileEntityLockable
        getRootLens:
          modifiers:
          - public
          params: []
          return: org.spongepowered.common.item.inventory.lens.Lens
        getSlotProvider:
          modifiers:
          - public
          params: []
          return: org.spongepowered.common.item.inventory.lens.SlotProvider
          from: net.minecraft.tileentity.TileEntityLockableLoot
        handler$onConstructed$zij007:
          modifiers:
          - public
          params:
          - org.spongepowered.asm.mixin.injection.callback.CallbackInfo
          return: void
        handler$onUpdate$zij002:
          modifiers:
          - public
          params:
          - org.spongepowered.asm.mixin.injection.callback.CallbackInfo
          return: void
        handler$onOpenInventory$zij000:
          modifiers:
          - public
          params:
          - net.minecraft.entity.player.EntityPlayer
          - org.spongepowered.asm.mixin.injection.callback.CallbackInfo
          return: void
        getDoubleChestInventory:
          modifiers:
          - public
          params: []
          return: java.util.Optional
        handler$onCloseInventory$zij000:
          modifiers:
          - public
          params:
          - net.minecraft.entity.player.EntityPlayer
          - org.spongepowered.asm.mixin.injection.callback.CallbackInfo
          return: void
        setCustomDisplayName:
          modifiers:
          - public
          params:
          - java.lang.String
          return: void
        supplyVanillaManipulators:
          modifiers:
          - public
          params:
          - java.util.List
          return: void
          from: net.minecraft.tileentity.TileEntity
        parent:
          modifiers:
          - public
          params: []
          return: org.spongepowered.api.item.inventory.Inventory
          from: net.minecraft.tileentity.TileEntityLockableLoot
        clear:
          modifiers:
          - public
          params: []
          return: void
          from: net.minecraft.tileentity.TileEntityLockableLoot
        next:
          modifiers:
          - public
          params: []
          return: org.spongepowered.api.item.inventory.Inventory
          from: net.minecraft.tileentity.TileEntityLockableLoot
        first:
          modifiers:
          - public
          params: []
          return: org.spongepowered.api.item.inventory.Inventory
          from: net.minecraft.tileentity.TileEntityLockableLoot
        slots:
          modifiers:
          - public
          params: []
          return: java.lang.Iterable
          from: net.minecraft.tileentity.TileEntityLockableLoot
        getChild:
          modifiers:
          - public
          params:
          - int
          return: org.spongepowered.api.item.inventory.Inventory
          from: net.minecraft.tileentity.TileEntityLockableLoot
        toContainer:
          modifiers:
          - public
          params: []
          return: org.spongepowered.api.data.DataContainer
          from: net.minecraft.tileentity.TileEntity
        emptyInventory:
          modifiers:
          - final
          - protected
          params: []
          return: org.spongepowered.api.item.inventory.EmptyInventory
          from: net.minecraft.tileentity.TileEntityLockableLoot
        getTileEntity:
          modifiers:
          - public
          params: []
          return: java.util.Optional
          from: net.minecraft.tileentity.TileEntityLockable
        getCarrier:
          modifiers:
          - public
          params: []
          return: java.util.Optional
          from: net.minecraft.tileentity.TileEntityLockable
        remove:
          modifiers:
          - public
          params:
          - org.spongepowered.api.data.key.Key
          return: org.spongepowered.api.data.DataTransactionResult
          from: net.minecraft.tileentity.TileEntity
        get:
          modifiers:
          - public
          params:
          - org.spongepowered.api.data.key.Key
          return: java.util.Optional
          from: net.minecraft.tileentity.TileEntity
        getProperty:
          modifiers:
          - public
          params:
          - java.lang.Class
          return: java.util.Optional
          from: net.minecraft.tileentity.TileEntity
        getValue:
          modifiers:
          - public
          params:
          - org.spongepowered.api.data.key.Key
          return: java.util.Optional
          from: net.minecraft.tileentity.TileEntity
        access$000:
          modifiers:
          - static
          params: []
          return: net.minecraft.util.registry.RegistryNamespaced
          from: net.minecraft.tileentity.TileEntity
        getLocation:
          modifiers:
          - public
          params: []
          return: org.spongepowered.api.world.Location
          from: net.minecraft.tileentity.TileEntity
        copy:
          modifiers:
          - public
          - volatile
          params: []
          return: org.spongepowered.api.data.value.ValueContainer
          from: net.minecraft.tileentity.TileEntity
        getType:
          modifiers:
          - final
          - public
          params: []
          return: org.spongepowered.api.block.tileentity.TileEntityType
          from: net.minecraft.tileentity.TileEntity
        getKeys:
          modifiers:
          - public
          params: []
          return: java.util.Set
          from: net.minecraft.tileentity.TileEntity
        offer:
          modifiers:
          - public
          - volatile
          params:
          - org.spongepowered.api.data.value.ValueContainer
          - org.spongepowered.api.data.merge.MergeFunction
          return: org.spongepowered.api.data.DataTransactionResult
          from: net.minecraft.tileentity.TileEntity
        isValid:
          modifiers:
          - public
          params: []
          return: boolean
          from: net.minecraft.tileentity.TileEntity
        handler$onRegister$zif000:
          modifiers:
          - private
          - static
          params:
          - java.lang.String
          - java.lang.Class
          - org.spongepowered.asm.mixin.injection.callback.CallbackInfo
          return: void
          from: net.minecraft.tileentity.TileEntity
        handler$onReadFromNBT$zif001:
          modifiers:
          - public
          params:
          - net.minecraft.nbt.NBTTagCompound
          - org.spongepowered.asm.mixin.injection.callback.CallbackInfo
          return: void
          from: net.minecraft.tileentity.TileEntity
        handler$onWriteToNBT$zif001:
          modifiers:
          - public
          params:
          - net.minecraft.nbt.NBTTagCompound
          - org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable
          return: void
          from: net.minecraft.tileentity.TileEntity
        lambda$onMarkDirty$0:
          modifiers:
          - private
          params:
          - org.spongepowered.api.block.tileentity.TileEntity
          return: void
          from: net.minecraft.tileentity.TileEntity
        handler$onMarkDirty$zif000:
          modifiers:
          - public
          params:
          - org.spongepowered.asm.mixin.injection.callback.CallbackInfo
          return: void
          from: net.minecraft.tileentity.TileEntity
        getContainers:
          modifiers:
          - public
          params: []
          return: java.util.Collection
          from: net.minecraft.tileentity.TileEntity
        supportsCustom:
          modifiers:
          - public
          params:
          - org.spongepowered.api.data.key.Key
          return: boolean
          from: net.minecraft.tileentity.TileEntity
        getCustomValue:
          modifiers:
          - public
          params:
          - org.spongepowered.api.data.key.Key
          return: java.util.Optional
          from: net.minecraft.tileentity.TileEntity
        lambda$getKeys$1:
          modifiers:
          - private
          - static
          params:
          - org.spongepowered.api.data.manipulator.DataManipulator
          return: java.util.stream.Stream
          from: net.minecraft.tileentity.TileEntity
        hasManipulators:
          modifiers:
          - public
          params: []
          return: boolean
          from: net.minecraft.tileentity.TileEntity
        removeCustom:
          modifiers:
          - public
          params:
          - org.spongepowered.api.data.key.Key
          return: org.spongepowered.api.data.DataTransactionResult
          from: net.minecraft.tileentity.TileEntity
        writeToNbt:
          modifiers:
          - public
          params:
          - net.minecraft.nbt.NBTTagCompound
          return: void
          from: net.minecraft.tileentity.TileEntity
        readFromNbt:
          modifiers:
          - public
          params:
          - net.minecraft.nbt.NBTTagCompound
          return: void
          from: net.minecraft.tileentity.TileEntity
        createArchetype:
          modifiers:
          - public
          params: []
          return: org.spongepowered.api.block.tileentity.TileEntityArchetype
          from: net.minecraft.tileentity.TileEntity
        getCustom:
          modifiers:
          - public
          params:
          - org.spongepowered.api.data.key.Key
          return: java.util.Optional
          from: net.minecraft.tileentity.TileEntity
        offerCustom:
          modifiers:
          - public
          params:
          - org.spongepowered.api.data.manipulator.DataManipulator
          - org.spongepowered.api.data.merge.MergeFunction
          return: org.spongepowered.api.data.DataTransactionResult
          from: net.minecraft.tileentity.TileEntity
        getLocatableBlock:
          modifiers:
          - public
          params: []
          return: org.spongepowered.api.world.LocatableBlock
          from: net.minecraft.tileentity.TileEntity
        isVanilla:
          modifiers:
          - public
          params: []
          return: boolean
          from: net.minecraft.tileentity.TileEntity
        getBlock:
          modifiers:
          - public
          params: []
          return: org.spongepowered.api.block.BlockState
          from: net.minecraft.tileentity.TileEntity
        supports:
          modifiers:
          - public
          params:
          - java.lang.Class
          return: boolean
          from: net.minecraft.tileentity.TileEntity
        validateRawData:
          modifiers:
          - public
          params:
          - org.spongepowered.api.data.DataView
          return: boolean
          from: net.minecraft.tileentity.TileEntity
        setRawData:
          modifiers:
          - public
          params:
          - org.spongepowered.api.data.DataView
          return: void
          from: net.minecraft.tileentity.TileEntity
        getValues:
          modifiers:
          - public
          params: []
          return: java.util.Set
          from: net.minecraft.tileentity.TileEntity
        getOrCreate:
          modifiers:
          - public
          params:
          - java.lang.Class
          return: java.util.Optional
          from: net.minecraft.tileentity.TileEntity
        copyFrom:
          modifiers:
          - public
          params:
          - org.spongepowered.api.data.DataHolder
          - org.spongepowered.api.data.merge.MergeFunction
          return: org.spongepowered.api.data.DataTransactionResult
          from: net.minecraft.tileentity.TileEntity
        undo:
          modifiers:
          - public
          params:
          - org.spongepowered.api.data.DataTransactionResult
          return: org.spongepowered.api.data.DataTransactionResult
          from: net.minecraft.tileentity.TileEntity
        getTimingsHandler:
          modifiers:
          - public
          params: []
          return: co.aikar.timings.Timing
          from: net.minecraft.tileentity.TileEntity
        getApplicableProperties:
          modifiers:
          - public
          params: []
          return: java.util.Collection
          from: net.minecraft.tileentity.TileEntity
        lambda$getOrCreate$0:
          modifiers:
          - private
          - static
          params:
          - org.spongepowered.api.data.manipulator.DataManipulator
          return: org.spongepowered.api.data.manipulator.DataManipulator
          from: net.minecraft.tileentity.TileEntity
        getContentVersion:
          modifiers:
          - public
          params: []
          return: int
          from: net.minecraft.tileentity.TileEntity
        lambda$getCustom$1:
          modifiers:
          - private
          - static
          params:
          - org.spongepowered.api.data.key.Key
          - org.spongepowered.api.data.manipulator.DataManipulator
          return: boolean
          from: net.minecraft.tileentity.TileEntity
        lambda$getValues$2:
          modifiers:
          - private
          - static
          params:
          - org.spongepowered.api.data.manipulator.DataManipulator
          return: java.util.stream.Stream
          from: net.minecraft.tileentity.TileEntity
        lambda$getCustom$2:
          modifiers:
          - private
          - static
          params:
          - org.spongepowered.api.data.key.Key
          - org.spongepowered.api.data.manipulator.DataManipulator
          return: java.util.Optional
          from: net.minecraft.tileentity.TileEntity
        lambda$getCustomValue$4:
          modifiers:
          - private
          - static
          params:
          - org.spongepowered.api.data.key.Key
          - org.spongepowered.api.data.manipulator.DataManipulator
          return: java.util.Optional
          from: net.minecraft.tileentity.TileEntity
        lambda$getCustomValue$3:
          modifiers:
          - private
          - static
          params:
          - org.spongepowered.api.data.key.Key
          - org.spongepowered.api.data.manipulator.DataManipulator
          return: boolean
          from: net.minecraft.tileentity.TileEntity
        lambda$supportsCustom$0:
          modifiers:
          - private
          - static
          params:
          - org.spongepowered.api.data.key.Key
          - org.spongepowered.api.data.manipulator.DataManipulator
          return: boolean
          from: net.minecraft.tileentity.TileEntity
        getCustomManipulators:
          modifiers:
          - public
          params: []
          return: java.util.List
          from: net.minecraft.tileentity.TileEntity
        markDirty:
          modifiers:
          - public
          params: []
          return: void
          from: net.minecraft.tileentity.TileEntity
        getTileData:
          modifiers:
          - public
          params: []
          return: net.minecraft.nbt.NBTTagCompound
          from: net.minecraft.tileentity.TileEntity
        setValid:
          modifiers:
          - public
          params:
          - boolean
          return: void
          from: net.minecraft.tileentity.TileEntity
        handler$endWriteToNBTInject$zoc000:
          modifiers:
          - private
          params:
          - net.minecraft.nbt.NBTTagCompound
          - org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable
          return: void
          from: net.minecraft.tileentity.TileEntity
        handler$endReadFromNBTInject$zoc000:
          modifiers:
          - private
          params:
          - net.minecraft.nbt.NBTTagCompound
          - org.spongepowered.asm.mixin.injection.callback.CallbackInfo
          return: void
          from: net.minecraft.tileentity.TileEntity
        finalize:
          modifiers:
          - protected
          params: []
          return: void
          from: java.lang.Object
        wait:
          modifiers:
          - final
          - native
          - public
          params:
          - long
          return: void
          from: java.lang.Object
        equals:
          modifiers:
          - public
          params:
          - java.lang.Object
          return: boolean
          from: java.lang.Object
        toString:
          modifiers:
          - public
          params: []
          return: java.lang.String
          from: java.lang.Object
        hashCode:
          modifiers:
          - native
          - public
          params: []
          return: int
          from: java.lang.Object
        getClass:
          modifiers:
          - final
          - native
          - public
          params: []
          return: java.lang.Class
          from: java.lang.Object
        clone:
          modifiers:
          - native
          - protected
          params: []
          return: java.lang.Object
          from: java.lang.Object
        notify:
          modifiers:
          - final
          - native
          - public
          params: []
          return: void
          from: java.lang.Object
        notifyAll:
          modifiers:
          - final
          - native
          - public
          params: []
          return: void
          from: java.lang.Object
        registerNatives:
          modifiers:
          - native
          - private
          - static
          params: []
          return: void
          from: java.lang.Object

  MessageRequest:
    type: object
    properties:
      id:
        type: string
        description: The id of the message. This will be sent back in the reply, so you can identify the request.
      target:
        type: string
        description: The UUID of the player this message is sent to.
      message:
        type: string
        description: The message sent to the player. Text formatting can be applied with ampersand formatting.
      options:
        type: object
        description: |
          These are the options the player can choose from. The key is sent back to the server,
          the value is displayed to the player.

  ServerInfo:
    type: object
    properties:
      motd:
        type: string
        description: The message of the day set on the server.
      players:
        type: integer
        description: The amount of players currently playing on the server
      maxPlayers:
        type: integer
        description: The maximum amount of players allowed on the server
      uptimeTicks:
        type: integer
        description: The number of ticks the server has been running
      tps:
        type: number
        description: The average ticks per second the server is running with. 20 is ideal.
      hasWhitelist:
        type: boolean
        description: True if the server has a whitelist, false otherwise.
      minecraftVersion:
        type: string
        description: The minecraft version running on the server.
      game:
        $ref: '#/definitions/ServerInfoDetail'
      api:
        $ref: '#/definitions/ServerInfoDetail'
      implementation:
        $ref: '#/definitions/ServerInfoDetail'
    example:
      motd: A Minecraft Server
      players: 1
      maxPlayers: 20
      uptimeTicks: 85404
      tps: 19.65
      hasWhitelist: false
      minecraftVersion: 1.11.2
      game:
        id: minecraft
        name: Minecraft
        version: 1.11.2
        description: Minecraft is a game about placing block and going on adventures
        url: 1.11.2
        authors:
        - Mojang
      api:
        id: spongeapi
        name: SpongeAPI
        version: 6.0.0-SNAPSHOT-8aabd12
        description: A Minecraft plugin API
        url: 6.0.0-SNAPSHOT-8aabd12
        authors: []
      implementation:
        id: sponge
        name: SpongeVanilla
        version: 1.11.2-6.0.0-BETA-229
        description: The SpongeAPI implementation for Vanilla Minecraft
        url: 1.11.2-6.0.0-BETA-229
        authors: []

  ServerInfoDetail:
    type: object
    description: Information about the Game/API/Implementation running on the server.
    properties:
      id:
        type: string
        description: The unique id of the api.
      name:
        type: string
        description: The name of the api.
      version:
        type: string
        description: The version of the api.
      description:
        type: string
        description: The description of the api.
      url:
        type: string
        description: The website of the api.
      authors:
        type: array
        description: The list of authors that worked on the api.
        items:
          type: string
          description: The name of the author.
    example:
      id: sponge
      name: SpongeVanilla
      version: 1.11.2-6.0.0-BETA-229
      description: The SpongeAPI implementation for Vanilla Minecraft
      url: 1.11.2-6.0.0-BETA-229
      authors: []

  BlockChangeList:
    type: array
    items:
      type: object
      required:
        - world
        - min
        - max
      properties:
        world:
          type: string
          description: |
            The UUID of the world that the block update is applied to.

            Either the property `block` or `blocks` has to be set.

            If the property `block` is set then all the blocks within the area defined by `min` and `max` are changed to the specified block.

            If the property `blocks` is set then it defines nested arrays of the blocks within the area defined by `min` and `max`.
            The arrays should contain the blocks such that a block located at [min.X + x, min.Y + y, min.Z + z] can be accessed by `blocks[x][y][z]`,
            where `min` is the vecotor defined by the `min` property.
        min:
          $ref: '#/definitions/Vector3'
        max:
          $ref: '#/definitions/Vector3'
        block:
          $ref: '#/definitions/BlockFull'
        blocks:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                $ref: '#/definitions/BlockFull'
  BlockVolume:
    type: object
    properties:
      min:
        $ref: '#/definitions/Vector3'
      max:
        $ref: '#/definitions/Vector3'
      blocks:
        type: array
        items:
          type: array
          items:
            type: array
            items:
              $ref: '#/definitions/BlockFull'
  BlockFull:
    type: object
    properties:
      type:
        type: string
        description: The type of the block, eg. `minecraft:dirt`
      data:
        type: object
        description: Additional block properties that define this block.
    example:
      type: minecraft:dark_oak_stairs
      data:
        facing: SOUTH
        half: BOTTOM
        shape: STRAIGHT

  ChatHistory:
    type: object
    properties:
      messages:
        type: array
        description: A list of chat messages.
        items:
          $ref: '#/definitions/ChatMessage'
  ChatMessage:
    type: object
    properties:
      timestamp:
        type: string
        description: The timestamp when the message was sent (server time).
      sender:
        type: string
        description: The name of the player that sent the message.
      message:
        type: string
        description: The message that was sent.
      wasCancelled:
        type: boolean
        description: True if the execution of the command was cancelled.
    example:
      timestamp: 1490533107
      sender:
        type: player
        uuid: 357427c6-3b91-4ead-aad4-15a3e18e6452
        location:
          world:
            name: world
            uuid: c574ab53-831b-4410-b3ad-955a2a504843
            link: "/api/world/c574ab53-831b-4410-b3ad-955a2a504843"
          position:
            x: -1289.0203529877956
            y: 4
            z: -1065.111295771125
        name: Valandur
        link: "/api/player/357427c6-3b91-4ead-aad4-15a3e18e6452"
        class: net.minecraft.entity.player.EntityPlayerMP
      message: Valandur joined the game
      wasCancelled: false
  CommandHistory:
    type: object
    properties:
      messages:
        type: array
        description: A list of command calls.
        items:
          $ref: '#/definitions/CommandCall'
  CommandCall:
    type: object
    properties:
      timestamp:
        type: string
        description: The timestamp when the message was sent (server time).
      command:
        type: string
        description: The name of the command that was executed.
      args:
        type: array
        description: The command arguments passed to the command.
        items:
          type: string
      source:
        type: object
        description: An object describing the source (executor) of the command. Usually a player or the console.
      result:
        $ref: '#/definitions/CommandResult'
    example:
      timestamp: 1490533099
      command: unban
      args: Valandur
      cause:
        Source: net.minecraft.server.dedicated.DedicatedServer
      wasCancelled: false
      result: {}
  CommandResult:
    type: object
    properties:
      affectedBlocks:
        type: number
        description: The number of block that were affected.
      affectedEntities:
        type: number
        description: The number of entities that were affected.
      affectedItems:
        type: number
        description: The number of items that were affected.
      queryResult:
        type: number
        description: The query result number.
      successCount:
        type: number
        description: The success count.

  CommandList:
    type: object
    properties:
      commands:
        type: array
        description: A list of commands
        items:
          $ref: '#/definitions/Command'
  Command:
    type: object
    properties:
      name:
        type: string
        description: The main name of the command.
      description:
        type: string
        description: Describes what the command does.
      link:
        type: string
        description: The API URL which contains detailed information about this command.
    example:
      name: webapi
      description: Manage Web-API settings
      link: "/api/cmd/webapi"
  CommandFull:
    allOf:
      - $ref: '#/definitions/Command'
      - type: object
        properties:
          aliases:
            type: array
            description: All the aliases with which the command can be executed.
            items:
              type: string
          usage:
            type: string
            description: The usage instructions for the command.
          help:
            type: string
            description: More information about the command.
    example:
      name: webapi
      description: Manage Web-API settings
      aliases:
      - webapi:webapi
      - webapi
      usage: blacklist|whitelist|notify
      help: |-
        Manage Web-API settings
        blacklist|whitelist|notify
      link: "/api/cmd/webapi"
  CommandRequestList:
    type: array
    items:
      $ref: '#/definitions/CommandRequest'
  CommandRequest:
    type: object
    required:
      - command
    properties:
      name:
        type: string
        description: The name that is displayed as the executor.
        default: Web-API
      command:
        type: string
        description: The command and it's arguments that are sent to the server.
      waitLines:
        type: integer
        description: The minimum amount of lines of text to wait for before returning the response.
        default: 0
      waitTime:
        type: integer
        description: The amount of time in milliseconds to wait for response messages from the server.
        default: 0
  CommandResponse:
    type: object
    properties:
      result:
        type: array
        description: An array of messages that were sent in response to the command.
        items:
          type: string

  PlayerList:
    type: object
    properties:
      maxPlayers:
        type: integer
        description: The maximum amount of players this server supports.
      players:
        type: array
        description: A list of players.
        items:
          $ref: '#/definitions/Player'
  Player:
    type: object
    properties:
      type:
        type: string
        description: The type of player, usually `minecraft:player`
      uuid:
        type: string
        description: The unique identifier of the player.
      location:
        $ref: '#/definitions/Location'
      name:
        type: string
        description: The name of the player.
      link:
        type: string
        description: The API URL which contains detailed information about this player.
      class:
        type: string
        description: The fully qualified class name of the object representing the player. Usually `net.minecraft.entity.player.EntityPlayerMP`.
    example:
      type: minecraft:player
      uuid: 357427c6-3b91-4ead-aad4-15a3e18e6452
      location:
        world:
          name: world
          uuid: c574ab53-831b-4410-b3ad-955a2a504843
          link: "/api/world/c574ab53-831b-4410-b3ad-955a2a504843"
        position:
          x: 0.3622799563437187
          y: 4
          z: -1.0292199195390332
      name: Valandur
      link: "/api/player/357427c6-3b91-4ead-aad4-15a3e18e6452"
      class: net.minecraft.entity.player.EntityPlayerMP
  PlayerFull:
    allOf:
      - $ref: '#/definitions/Player'
      - type: object
        properties:
          velocity:
            $ref: '#/definitions/Vector3'
          rotation:
            $ref: '#/definitions/Vector3'
          scale:
            $ref: '#/definitions/Vector3'
          inventory:
            $ref: '#/definitions/Inventory'
          connection:
            type: object
            properties:
              address:
                type: string
                description: The address the player is connecting from
              latency:
                type: integer
                description: The delay between the player and server
          armour:
            type: object
            properties:
              helmet:
                $ref: '#/definitions/ItemStack'
              chestplate:
                $ref: '#/definitions/ItemStack'
              leggings:
                $ref: '#/definitions/ItemStack'
              boots:
                $ref: '#/definitions/ItemStack'
          achievements:
            type: array
            description: An array of achievements the player has been awarded.
            items:
              type: object
              properties:
                id:
                  type: string
                  description: The unique id of the achievement
                name:
                  type: string
                  description: The displayed name of the achievement.
                class:
                  type: string
                  description: The fully qualified class name of the achievement.
                description:
                  type: string
                  description: The description that is displayed when hovering the achievement.
          experience:
            type: object
            properties:
              level:
                type: integer
                description: The current level of the player
              experience:
                type: integer
                description: The amount of experience SINCE THE LAST LEVEL.
              totalExperience:
                type: integer
                description: The total amount of experience earned.
          gameMode:
            type: string
            description: The current game mode the player is in.
          joined:
            type: object
            properties:
              first:
                type: number
                description: The unix timestamp (seconds) when the player first joined the server.
              last:
                type: number
                description: The unix timestamp (seconds) when the player last joined the server.
          health:
            type: object
            properties:
              current:
                type: number
                description: The current amount of health the player has.
              max:
                type: number
                description: The maximum amount of health the player can have.
          food:
            type: object
            properties:
              foodLevel:
                type: number
                description: The current amount of food the player has.
              exhaustion:
                type: number
                description: How exhausted the player is.
              saturation:
                type: number
                description: How saturated the player is.
          statistics:
            type: object
            description: A map from statistics id to value, keeping track of the players actions.
    example:
      type: minecraft:player
      uuid: 357427c6-3b91-4ead-aad4-15a3e18e6452
      location:
        world:
          name: world
          uuid: c574ab53-831b-4410-b3ad-955a2a504843
          link: "/api/world/c574ab53-831b-4410-b3ad-955a2a504843"
        position:
          x: 0.4615942321910655
          y: 4
          z: -0.6950285369083933
      rotation:
        x: 31.95008659362793
        y: -359.83551025390625
        z: 0
      scale:
        x: 1
        y: 1
        z: 1
      name: Valandur
      armour:
        helmet:
        chestplate:
        leggings:
        boots:
      connection:
        address: "/127.0.0.1:35310"
        latency: 0
      inventory:
        name: Inventory
        stackCount: 2
        itemCount: 2
        items:
        - id: minecraft:dark_oak_stairs
          quantity: 1
          data: {}
        - id: minecraft:spawn_egg
          quantity: 1
          data:
            spawn: minecraft:skeleton_horse
      link: "/api/player/357427c6-3b91-4ead-aad4-15a3e18e6452"
      class: net.minecraft.entity.player.EntityPlayerMP
      statistics:
        chest_opened: 2
        use_item.minecraft.dispenser: 1
        walk_one_cm: 38715
        use_item.minecraft.sapling: 1
        use_item.minecraft.chest: 2
        craft_item.minecraft.planks: 16
        leave_game: 34
        craft_item.minecraft.crafting_table: 1
        dispenser_inspected: 1
        use_item.minecraft.dark_oak_stairs: 2
        use_item.minecraft.dye: 2
        mine_block.minecraft.log: 1
        talked_to_villager: 6
        pickup.minecraft.log: 62
        fly_one_cm: 1351
        deaths: 10
        jump: 15
        play_one_minute: 1062820
        fall_one_cm: 20680
        use_item.minecraft.planks: 2
        sneak_time: 5
        use_item.minecraft.spruce_stairs: 5
        crouch_one_cm: 31
        time_since_death: 440265
        pickup.minecraft.sapling: 1
        use_item.minecraft.dirt: 11
        sprint_one_cm: 1745
        use_item.minecraft.stained_glass: 1
        use_item.minecraft.sign: 3
        use_item.minecraft.red_sandstone_stairs: 2
        use_item.minecraft.spawn_egg: 8
      achievements:
      - id: mine_wood
        name: Getting Wood
        class: net.minecraft.stats.Achievement
        description: Attack a tree until a block of wood pops out
      - id: open_inventory
        name: Taking Inventory
        class: net.minecraft.stats.Achievement
        description: Press '%1$s' to open your inventory
      joined:
        first: 1489329688
        last: 1492352651
      health:
        current: 20
        max: 20
      velocity:
        x: 0.02433375901921936
        y: 0
        z: 0.05446270355102478
      experience:
        level: 0
        experience: 0
        totalExperience: 0
      gameMode: minecraft:creative
      food:
        foodLevel: 20
        exhaustion: 3.049999952316284
        saturation: 1
  WorldList:
    type: object
    properties:
      worlds:
        type: array
        description: A list of worlds.
        items:
          $ref: '#/definitions/World'
  World:
    type: object
    properties:
      name:
        type: string
        description: The name of the world.
      uuid:
        type: string
        description: The unique id of the world.
      link:
        type: string
        description: The API URL which contains detailed information about this world.
    example:
      name: world
      uuid: c574ab53-831b-4410-b3ad-955a2a504843
      link: "/api/world/c574ab53-831b-4410-b3ad-955a2a504843"
  WorldFull:
    allOf:
      - $ref: '#/definitions/World'
      - type: object
        properties:
          border:
            type: object
            properties:
              center:
                $ref: '#/definitions/Vector3'
              diameter:
                type: number
                description: The diameter of the world border.
              damageAmount:
                type: number
                description: The amount of damage done to the player when outside the world border.
              damageThreshold:
                type: number
                description: The amount of time in seconds to wait before applying the damage.
              newDiameter:
                type: number
                description: The new diameter the world border is going to change to.
              timeRemaining:
                type: number
                description: The amount of time remaining before the world border reaches the new diameter.
              warningDistance:
                type: number
                description: The distance at which a player is warned of the world border.
              warningTime:
                type: number
                description: The amount of time in seconds before a contracting world border reaches a player that the player is warned.
          difficulty:
            type: string
            description: The current difficulty of the world.
          dimension:
            type: object
            properties:
              type:
                type: object
                properties:
                  id:
                    type: string
                    description: The unique id of the dimension type.
                  name:
                    type: string
                    description: The name of the dimension type.
                  dimensionClass:
                    type: string
                    description: The classname of the dimension.
              height:
                type: number
                description: The height of the dimension.
              buildHeight:
                type: number
                description: The maximum allowed build height of the dimension.
          gameMode:
            type: string
            description: The default game mode of the world.
          generator:
            type: object
            properties:
              id:
                type: string
                description: The unique id of the generator type.
              name:
                type: string
                description: The name of the generator type.
              settings:
                type: string
                description: A map of various generator settings to values.
          seed:
            type: number
            description: The seed used to generate this world.
          spawn:
            $ref: '#/definitions/Vector3'
          time:
            type: number
            description: The current in game time.
          weather:
            type: string
            description: The current weather of the world.
    example:
      name: world
      uuid: c574ab53-831b-4410-b3ad-955a2a504843
      border:
        center:
          x: 0
          y: 0
          z: 0
        diameter: 60000000
        damageAmount: 0.2
        damageThreshold: 5
        newDiameter: 60000000
        timeRemaining: 0
        warningDistance: 5
        warningTime: 15
      difficulty: minecraft:peaceful
      dimension:
        type:
          id: minecraft:overworld
          name: Overworld
          dimensionClass: net.minecraft.world.WorldProviderSurface
        height: 256
        buildHeight: 256
      gameMode: minecraft:creative
      gameRules:
        commandBlockOutput: 'true'
        disableElytraMovementCheck: 'false'
        doDaylightCycle: 'true'
        doEntityDrops: 'true'
        doFireTick: 'true'
        doMobLoot: 'true'
        doMobSpawning: 'true'
        doTileDrops: 'true'
        doWeatherCycle: 'true'
        keepInventory: 'false'
        logAdminCommands: 'true'
        maxEntityCramming: '24'
        mobGriefing: 'true'
        naturalRegeneration: 'true'
        randomTickSpeed: '3'
        reducedDebugInfo: 'false'
        sendCommandFeedback: 'true'
        showDeathMessages: 'true'
        spawnRadius: '10'
        spectatorsGenerateChunks: 'true'
      generator:
        id: minecraft:flat
        name: flat
        settings:
          customSettings: 3;minecraft:bedrock,2*minecraft:dirt,minecraft:grass;1;village
      seed: -8009412544287338000
      spawn:
        x: -1288
        y: 4
        z: -1066
      time: 66110
      weather: minecraft:clear
      link: "/api/world/c574ab53-831b-4410-b3ad-955a2a504843"

  PluginList:
    type: object
    properties:
      plugins:
        type: array
        description: A list of plugin ids.
        items:
          $ref: '#/definitions/Plugin'
  Plugin:
    type: object
    properties:
      id:
        type: string
        description: The unique id of the plugin.
      name:
        type: string
        description: The name of the plugin.
      version:
        type: string
        description: The version of the plugin.
      link:
        type: string
        description: The API URL which contains detailed information about this plugin.
    example:
      id: minecraft
      name: Minecraft
      version: 1.11.2
      link: "/api/plugin/minecraft"
  PluginFull:
    allOf:
      - $ref: '#/definitions/Plugin'
      - type: object
        properties:
          description:
            type: string
            description: The description of the plugin.
          url:
            type: string
            description: The website that the plugin belongs to.
          authors:
            type: array
            description: The list of authors that worked on the plugin.
            items:
              type: string
              description: The name of the author.
    example:
      id: webapi
      name: Web-API
      version: 2.0.2-S6.0
      description: Access Minecraft through a Web API
      url: https://github.com/Valandur/Web-API
      authors:
      - Valandur
      link: "/api/plugin/webapi"

  EntityList:
    type: object
    properties:
      entities:
        type: array
        description: A list of entities.
        items:
          $ref: '#/definitions/Entity'
  Entity:
    type: object
    properties:
      type:
        type: string
        description: The type of the entity.
      uuid:
        type: string
        description: The uuid of the entity.
      location:
        $ref: '#/definitions/Location'
      link:
        type: string
        description: The API URL which contains detailed information about this entity.
      class:
        type: string
        description: The fully qualified classname of the entity.
    example:
      type: sheep
      uuid: 8835e1b0-b385-416b-aebf-02446bbfa63f
      location:
        world:
          name: world
          uuid: c574ab53-831b-4410-b3ad-955a2a504843
          link: "/api/world/c574ab53-831b-4410-b3ad-955a2a504843"
        position:
          x: -1263.7945795740736
          y: 4
          z: -1119.1971438629455
      link: "/api/entity/8835e1b0-b385-416b-aebf-02446bbfa63f"
      class: net.minecraft.entity.passive.EntitySheep
  EntityFull:
    allOf:
      - $ref: '#/definitions/Entity'
      - type: object
        properties:
          velocity:
            $ref: '#/definitions/Vector3'
          rotation:
            $ref: '#/definitions/Vector3'
          scale:
            $ref: '#/definitions/Vector3'
    example:
      type: minecraft:sheep
      uuid: 8835e1b0-b385-416b-aebf-02446bbfa63f
      location:
        world:
          name: world
          uuid: c574ab53-831b-4410-b3ad-955a2a504843
          link: "/api/world/c574ab53-831b-4410-b3ad-955a2a504843"
        position:
          x: -1263.7945795740736
          y: 4
          z: -1119.1971438629455
      rotation:
        x: 0
        y: 224.205078125
        z: 0
      scale:
        x: 1
        y: 1
        z: 1
      link: "/api/entity/8835e1b0-b385-416b-aebf-02446bbfa63f"
      class: net.minecraft.entity.passive.EntitySheep
      sheared: false
      dye: white
      health:
        current: 8
        max: 8
      velocity:
        x: 0
        y: -0.0784000015258789
        z: 0

  TileEntityList:
    type: object
    properties:
      tileEntities:
        type: array
        description: A list of tile entities.
        items:
          $ref: '#/definitions/TileEntity'
  TileEntity:
    type: object
    properties:
      type:
        type: string
        description: The type of the tile entity.
      location:
        $ref: '#/definitions/Location'
      link:
        type: string
        description: The API URL which contains detailed information about this tile entity.
      class:
        type: string
        description: The fully qualified classname of the tile entity.
    example:
      type: chest
      location:
        world:
          name: world
          uuid: c574ab53-831b-4410-b3ad-955a2a504843
          link: "/api/world/c574ab53-831b-4410-b3ad-955a2a504843"
        position:
          x: -1291
          y: 4
          z: -1066
      link: "/api/tile-entity/c574ab53-831b-4410-b3ad-955a2a504843/-1291/4/-1066"
      class: net.minecraft.tileentity.TileEntityChest
  TileEntityFull:
    allOf:
      - $ref: '#/definitions/TileEntity'
      - type: object
    example:
      type: chest
      location:
        world:
          name: world
          uuid: c574ab53-831b-4410-b3ad-955a2a504843
          link: "/api/world/c574ab53-831b-4410-b3ad-955a2a504843"
        position:
          x: -1291
          y: 4
          z: -1066
      data:
        worldUuid: c574ab53-831b-4410-b3ad-955a2a504843
        x: -1291
        y: 4
        z: -1066
        tileType: chest
        data:
        - dataClass: org.spongepowered.common.data.manipulator.mutable.block.SpongeConnectedDirectionData
          manipulatorData:
            connectedDirections:
            - SOUTH
            connectedNorth: false
            connectedSouth: true
            connectedEast: false
            connectedWest: false
        lock: ''
        contents:
        - slotId: 0
          item:
            itemType: minecraft:iron_pickaxe
            count: 1
            unsafeDamage: 0
        - slotId: 1
          item:
            itemType: minecraft:glass
            count: 1
            unsafeDamage: 0
        - slotId: 3
          item:
            itemType: minecraft:iron_axe
            count: 1
            unsafeDamage: 0
        - slotId: 5
          item:
            itemType: minecraft:planks
            count: 27
            unsafeDamage: 3
        - slotId: 15
          item:
            itemType: minecraft:glass
            count: 1
            unsafeDamage: 0
        - slotId: 16
          item:
            itemType: minecraft:glass
            count: 1
            unsafeDamage: 0
        - slotId: 21
          item:
            itemType: minecraft:gold_ore
            count: 1
            unsafeDamage: 0
        - slotId: 22
          item:
            itemType: minecraft:glass
            count: 1
            unsafeDamage: 0
        - slotId: 23
          item:
            itemType: minecraft:gold_ore
            count: 23
            unsafeDamage: 0
        - slotId: 24
          item:
            itemType: minecraft:glass
            count: 1
            unsafeDamage: 0
      link: "/api/tile-entity/c574ab53-831b-4410-b3ad-955a2a504843/-1291/4/-1066"
      class: net.minecraft.tileentity.TileEntityChest
