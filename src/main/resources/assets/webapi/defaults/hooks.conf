# Config file version, used to update correctly
version = 4

# Web hooks are used to send certain events on minecraft to other endpoints.
# This can be used for example to log chat or react to certain commands.

# The following are event hooks which are all called when the specified event happens. They get passed various data
# in the body (if method != GET, described below for each event). The format of the hooks is described in the "all"
# event hook. This format can be used anywhere marked with "HOOKS".
# Please note that the hooks don't get called in any particular order, and might even be called concurrently.
events {
    # This event is fired for all other events. The "X-WebAPI-Event" header specifies the exact event.
    all=[{
        # This is the address of the endpoint. It may contain parameters that are replaced when being called.
        # Parameters have to be placed in curly braces, { and }, and will be a simple string (uuid of object
        # where applicable). See the params sections for more details.
        address="http://127.0.0.1:25000/{world}"

        # This is the http method that is used (GET, PUT, POST or DELETE)
        method=POST

        # Choose to either send the data as:
        # JSON = application/json
        # FORM = application/x-www-form-urlencoded
        dataType=JSON

        # Set to true or omit to enable the endpoint.
        enabled=false

        # Set to true to send detailed json data
        details=false

        # Permissions node same as the ones in the permissions.conf file, use to configure which data is sent
        # to this node
        permissions="*"

        # This is a list of additional headers that is sent to the server. You can use this to e.g. specify a secret
        # key which ensures that the server knows the requests are coming from the Web-API.
        headers=[{
            name=X-WEBAPI-KEY
            value=MY-SUPER-SECRET-KEY
        }]

        # Filters are used to only send certain events to certain endpoints
        # Use the 'name' property to select a filter and pass additional options in the 'config' property
        filter {
            name="WebAPI-BlockType"
            config=[
                "minecraft:stone_button"
                "minecraft:wooden_button"
            ]
        }
    }]

    # This event is fired when a player earns an achievement
    achievement=[
        # HOOKS
    ]

    # This event is fired when a block update changes status
    # NOTE: These are not actual minecraft blocks updating, these are the WebAPI block updates
    block_update_status=[
        # HOOKS
    ]

    # This event is fired when a chat message is sent on the server
    chat=[
        # HOOKS
    ]

    # This event is fired when a command is executed
    command=[
        # HOOKS
    ]

    # This event is fired when a player clicks one of the options of an interactive message
    custom_message=[
        # HOOKS
    ]

    # This event is fired when a chunk is generated
    generate_chunk=[
        # HOOKS
    ]

    # This event is fired when an explosion occurs
    explosion=[
        # HOOKS
    ]

    # This event is fired when a player interacts with a block
    interact_block=[
        # HOOKS
    ]

    # This event is fired when an inventory is opened
    inventory_open=[
        # HOOKS
    ]

    # This event is fired when an inventory is closed
    inventory_close=[
        # HOOKS
    ]

    # This event is fired when a player joins the server
    player_join=[
        # HOOKS
    ]

    # This event is fired when a player leaves the server
    player_leave=[
        # HOOKS
    ]

    # This event is fired when a player dies
    player_death=[
        # HOOKS
    ]

    # This event is fired when a player gets kicked
    player_kick=[
        # HOOKS
    ]

    # This event is fired when a player gets banned
    player_ban=[
        # HOOKS
    ]

    # This event is fired when the server starts
    server_start=[
        # HOOKS
    ]

    # This event is fired when the server stops
    server_stop=[
        # HOOKS
    ]

    # This event is fired when the world is saved
    world_save=[
        # HOOKS
    ]

    # This event is fired when a world is loaded
    world_load=[
        # HOOKS
    ]

    # This event is fired when a world is unloaded
    world_unload=[
        # HOOKS
    ]
}

# These hooks can be used to bind to custom events. You have to use the fully qualified class name as the key, and then
# a hook list just like for the event hooks above. These hooks work just like the event hooks, although the data
# depends on the event you subscribe to.
custom={

    # _EXAMPLE_
    "org.spongepowered.api.event.command.SendCommandEvent": [
        # HOOKS
    ]
}

# The endpoints here get called when executing the specified command. For example the hook "test" would get executed
# when running the command /webapi notify test
command={

    # This is the name of the endpoint, which is used to call it via the webapi command.
    # _EXAMPLE_
    test={
        # If set to false this disables the complete command hook and also doesn't
        # register the command in the command registry
        enabled=false

        # The aliases this command can be called with.
        # THESE ARE NOT PREFIXED WITH "/webapi notify", BE CAREFUL NOT TO OVERRIDE OTHER COMMANDS! (unless you want to)
        aliases=[
            test
        ]

        # Here you have to specify what parameters are used in the address, headers and body.
        # These parameters must be included when running the command. So the example command below would have to be
        # run using the following syntax: /webapi notfy test {player} {world}
        #
        # Parameters in the address and headers have to be used explicitly, the body automatically contains all the
        # parameters that are listed here. The parameters are expected to show up in this order when calling the
        # command. There is a special parameter 'source' which is always included and contains the identifier of the
        # one who ran the command (e.g. UUID of the player).
        # Possible parameter types are: STRING, BOOL, INTEGER, DOUBLE, PLAYER, WORLD, LOCATION, VECTOR3D, VECTOR3I
        # Parameters can be marked as optional, and if set to true will be wrapped in an optional arguments.
        params=[
            {
                name=the_player
                type=player
            },
            {
                name=the_world
                type=world
                optional=true
            }
        ]

        # The list of hooks that is called when this command is executed
        # The same kind of hooks as in the events above can be used, with a few additions mentioned below
        hooks=[{
            # Parameters that you use in the address will be replaced with their short form (UUID where applicable)
            # Parameters must be placed in curly braces: { and }
            address="http://127.0.0.1:25000/{the_world}"

            enabled=false

            # You may also use parameters in the headers (same format as in "address").
            # Please note that the following headers will always be overridden by the Web-API:
            # X-WebAPI-Version, X-WebAPI-Event, X-WebAPI-Source, User-Agent, Content-Type, Content-Length, accept, charset
            headers=[{
                name=X-WEBAPI-PLAYER
                value="{the_player}"
            }]
        }]
    }
}
